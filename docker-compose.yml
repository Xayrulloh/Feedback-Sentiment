services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: feedback-sentiment-api
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${PORT}:${PORT}"
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  db:
    image: postgres:14-alpine
    container_name: feedback-sentiment-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: feedback-sentiment-redis
    ports:
      - '6379:6379'
    restart: unless-stopped
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
      - localprom
    ports:
      - "9090:9090"

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    networks:
      - localprom

  grafana:
      image: grafana/grafana
      container_name: feedback-sentiment-grafana
      ports:
        - "3001:3000"
      networks:
        - backend
      depends_on:
        - prometheus


networks:
  backend:
    driver: bridge
  localprom:
    driver: bridge

volumes:
  postgres_data:
    driver: local
